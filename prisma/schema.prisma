generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String? // <- make optional
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  transactions Transaction[]
  companies    Company[]
  notes        Note[]
  accounts     Account[] // required for OAuth
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Company {
  id           String        @id @default(cuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  transactions Transaction[]
  notes        Note[] // <â€” add back-relation
}

model Transaction {
  id        String   @id @default(cuid())
  title     String
  amount    Float
  type      String
  category  String
  date      DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  companyId String
  userId    String
  title     String   @default("")
  content   String
  completed Boolean  @default(false)
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // proper relations (the missing piece):
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, userId, completed, archived])
}

model AnalyzeUsage {
  id        String   @id @default(cuid())
  companyId String
  userId    String? // if you track users
  date      String // YYYY-MM-DD (server local or UTC; just be consistent)
  count     Int      @default(0)
  lastAt    DateTime @updatedAt
  costCents Int      @default(0)

  @@unique([companyId, userId, date])
}

model AnalyzeCache {
  key       String   @id // e.g. sha256 hash
  companyId String
  payload   Json
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([companyId, expiresAt])
}
